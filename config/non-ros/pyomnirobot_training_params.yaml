# Configuration parameters for Omnirobot training in pybullet ros simulator
# ________________________________________________________________________________

env:                        PyOmnibase-v0 
# environment ID
tensorboard_log:            /home/yc/test_train_models/ 
# Tensorboard log dir
trained_agent:              ""
# logs/ppo2/Omnibase-v0_1 / Default: "" / Path to a pretrained agent to continue training
algo:                       ppo2
# RL Algorithm, choices=list(ALGOS.keys())
n_timesteps:                -1 
# Overwrite the number of timesteps, this has nothing to do with the number of timesteps in an episode
log_interval:               -1 
# Override log interval (default: -1, no change)
eval_freq:                  -1
# Evaluate the agent every n steps (if negative, no evaluation)
eval_episodes:              3 
# Number of episodes to use for evaluation
save_freq:                  50000 
# Save the model every n steps (if negative, no checkpoint)
log_folder:                 logs 
# Log folder
seed:                       0 
# Random generator seed
n_trials:                   10 
# Number of trials for optimizing hyperparameters
optimize_hyperparameters:   False
# Run hyperparameters search
n_jobs:                     1 
# Number of parallel jobs when optimizing hyperparameters
sampler:                    tpe 
# Sampler to use when optimizing hyperparameters, choices=['random', 'tpe', 'skopt']
pruner:                     median 
# choices=['halving', 'median', 'none']
verbose:                    1 
# Verbose mode (0: no output, 1: INFO)
gym_packages:               [] 
# if there are any other packages you want to call
hyperparams:                None 
# Use if there are parameters to overwrite, in format: learning_rate:0.01 train_freq:10
uuid:                       False 
# Ensure that the run has a unique ID
env_kwargs:                 None 
# Optional keyword argument to pass to the env constructor
render:                     True
# Show simulation environment
# StoreDict action for hyperparams and env_kwargs: 
# In: args1:0.0 args2:"dict(a=1)"
# Out: {'args1': 0.0, arg2: dict(a=1)}

select_env: 1 # the labelling after 'env_obj'
# 0: Stadium maze environment
# 1: Simple straight line
# 2: Curvy corridor
# 3: Twisting corridor
# 4: Straight line with dynamic obstacles 
# 5: T-junction with unseen static obstacles
# 6: T-junction with dynamic obstacles
# 7: Hall, goals in circular formation
# 8: Static environment with deadends
# 9: Dynamic obstacles environment without static obstacles
# 10: Lab

